<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleObjects</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.ModuleObjects.Classes.AssemblyData">
            <summary>
            AssemblyData will load and unload an assembly and stores data about an assembly.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleData})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            </summary>
            <param name="name">Name of the assembly.</param>
            <param name="filePath">File path to the assembly.</param>
            <param name="modules">Collection of modules contained in the assembly.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the assembly is enabled or disabled.
            Will load or unload this assembly if the IModuleInfoRetriever is not null.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.FilePath">
            <summary>
            Gets or sets the file path to assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Modules">
            <summary>
            Gets or sets the collection of modules contained in the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Loader">
            <summary>
            Gets or sets the AssemblyLoader to load/unload this assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Assembly">
            <summary>
            Gets or sets the actual Assembly of this AssemblyData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader">
            <summary>
            The class that loads and unloads assemblies.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader"/> class.
            </summary>
            <param name="mainAssemblyToLoadPath">The path to the assembly.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.Load(System.Reflection.AssemblyName)">
            <summary>
            Overrides the Load method.
            </summary>
            <param name="name">The assembly name.</param>
            <returns>A loaded assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.MemberParameter">
            <summary>
            An object designed to hold the type, name and string description of a member's parameter.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            </summary>
            <param name="type">MemberParameter type.</param>
            <param name="name">MemberParameter name.</param>
            <param name="description">MemberParameter description.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            Used when the actual Type cannot be reached.
            </summary>
            <param name="typeName">MemberParameter type.</param>
            <param name="name">MemberParameter name.</param>
            <param name="description">MemberParameter description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.TypeName">
            <summary>
            Gets or sets the parameter type name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Description">
            <summary>
            Gets or sets the parameter description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Type">
            <summary>
            Gets or sets the actuall Type of the MemberParameter.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.IsEmpty">
            <summary>
            Check to see if the MemberParameter is empty.
            </summary>
            <returns>Returns true if the name is not an empty string or null.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.ToString">
            <summary>
            Overrides the ToString method and formats the string output of parameter type and name.
            </summary>
            <returns>A desired format for the parameter type and name.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor">
            <summary>
            ModuleConstructor object holds the ConstructorInfo, class name, description and the parameters a constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.#ctor(System.Reflection.ConstructorInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor"/> class.
            </summary>
            <param name="constructorInfo">ConstructorInfo for this ModuleConstructor.</param>
            <param name="className">Class name.</param>
            <param name="description">Constructor description.</param>
            <param name="parameters">Constructor parameters.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleConstructor.Parameters">
            <summary>
            Gets or sets the constructor parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleConstructor.ConstructorInfo">
            <summary>
            Gets or sets the actuall ConstructorInfo for this ModuleConstructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the constructor name, description, and parameters.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleData">
            <summary>
            Module object holds the name, description, members, methods, constructors and properties of a module.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleData"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.#ctor(System.Type,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleConstructor},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleProperty},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleMethod})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleData"/> class specifying the name,
            description and methods.
            </summary>
            <param name="type">Module type.</param>
            <param name="name">Module name.</param>
            <param name="description">Module description.</param>
            <param name="constructors">A collection of module constructors.</param>
            <param name="properties">A collection of module properties.</param>
            <param name="methods">A collection of module methods.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Name">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.FullName">
            <summary>
            Gets or sets this Module's Type's FullName.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Members">
            <summary>
            Gets or sets all of the module members.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Constructors">
            <summary>
            Gets or sets the module constructors.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Properties">
            <summary>
            Gets or sets the module properties.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Methods">
            <summary>
            Gets or sets the module methods.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Type">
            <summary>
            Gets or sets the actual Type of the ModuleData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.StoreModuleMembers">
            <summary>
            Store module constructors, properties and methods in the Members property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the module name, description and all members contained in module.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleMemberData">
            <summary>
            The base class for module members.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMemberData.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMemberData.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMemberData.TypeName">
            <summary>
            Gets or sets the name of the Type.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleMethod">
            <summary>
            ModuleMethod object holds the MethodInfo, name, description, the parameters and the return type of a member.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleMethod"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.#ctor(System.Reflection.MethodInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleMethod"/> class.
            </summary>
            <param name="methodInfo">MethodInfo for this ModuleMethod.</param>
            <param name="name">Method name.</param>
            <param name="description">Method description.</param>
            <param name="parameters">Method parameters.</param>
            <param name="returnType">Method return type.</param>
            <param name="returnDescription">Method return description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.Parameters">
            <summary>
            Gets or sets the method parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.ReturnType">
            <summary>
            Gets or sets the method return type.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.ReturnDescription">
            <summary>
            Gets or sets the method return description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.MethodInfo">
            <summary>
            Gets or sets the actual MethodInfo of the ModuleMethod.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.Invoke(System.Object[])">
            <summary>
            Invokes this method.
            </summary>
            <param name="args">The arguments needed to invoke this method.</param>
            <returns>An object that this method should return.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.ToString">
            <summary>
            Overrides the ToString method and formats the string output
            for the UI.
            </summary>
            <returns>A desired format for the member description, parameters
            and return type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.TestParameters(System.Object[])">
            <summary>
            Used to test if the passed in object array matches this method's parameter types.
            </summary>
            <param name="args">An array of objects that represent method parameters.</param>
            <returns>True if the object array matches the method's parameter types.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleProperty">
            <summary>
            ModuleProperty object holds the PropertyInfo, name, description, data type and accessor level of a property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleProperty"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.#ctor(System.Reflection.PropertyInfo,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleProperty"/> class.
            </summary>
            <param name="propertyInfo">PropertyInfo for this ModuleProperty.</param>
            <param name="name">Property name.</param>
            <param name="description">Property description.</param>
            <param name="dataType">Property data type.</param>
            <param name="canRead">Property has a 'get' accessor.</param>
            <param name="canWrite">Property has a 'set' accessor.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.DataType">
            <summary>
            Gets or sets the type of the property.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.CanRead">
            <summary>
            Gets or sets a value indicating whether this property has a get accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.CanWrite">
            <summary>
            Gets or sets a value indicating whether this property has a set accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.PropertyInfo">
            <summary>
            Gets or sets the actual PropertyInfo for this ModuleProperty.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the member description.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData">
            <summary>
            Assembly object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the assembly is enabled or disabled.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.FilePath">
            <summary>
            Gets or sets the file path to assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Modules">
            <summary>
            Gets or sets a collection of modules contained in the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Loader">
            <summary>
            Gets or sets the AssemblyLoader to load/unload this assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Assembly">
            <summary>
            Gets or sets the actual Assembly of this AssemblyData.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IModuleData">
            <summary>
            Module member object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleData.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleData.Members">
            <summary>
            Gets or sets all of the module members.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IModuleMemberData">
            <summary>
            Module object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleMemberData.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleMemberData.TypeName">
            <summary>
            Gets or sets the name of the Type.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.ITreeViewData">
            <summary>
            The base interface for IAssemblyData and IModuleData.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITreeViewData.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
    </members>
</doc>
