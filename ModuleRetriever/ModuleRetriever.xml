<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleRetriever</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.ModuleRetriever.Classes.AssemblyLoader">
            <summary>
            The class that loads and unloads assemblies.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.AssemblyLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleRetriever.Classes.AssemblyLoader"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.AssemblyLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleRetriever.Classes.AssemblyLoader"/> class.
            </summary>
            <param name="mainAssemblyToLoadPath">The path to the assembly.</param>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.AssemblyLoader.Load(System.Reflection.AssemblyName)">
            <summary>
            Overrides the Load method.
            </summary>
            <param name="name">The assembly name.</param>
            <returns>A loaded assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever">
            <summary>
            ModuleInfoRetriever is used to get information from a .dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever"/> class.
            </summary>
            <param name="moduleDirectory">File name of the .dll file.</param>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.DllFilePath">
            <summary>
            Gets or sets DllFilePath is the path of the .dll file.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.DescriptionRetriever">
            <summary>
            Gets or sets all xml descriptions.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.ModuleManager#ModuleRetriever#Interfaces#IModuleInfoRetriever#GetModules(System.String[])">
            <summary>
            GetModules will create an ObservableCollection of type Module to organize
            the information from the dll file and its related .xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of Module objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.GetSingleModule(System.Type)">
            <summary>
            Builds a singls module from the given Type.
            </summary>
            <param name="type">Type from an assembly.</param>
            <returns>A Module type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.AddConstructorsToCollection(System.Type)">
            <summary>
            AddConstructorsToCollection get all constructors from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModuleConstructor objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.AddPropertiesToCollection(System.Type)">
            <summary>
            AddPropertiesToCollection gets all properties from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModulePropery objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleInfoRetriever.AddMethodsToCollection(System.Type)">
            <summary>
            AddMethodsToCollection gets all methods from the passed in Type.
            </summary>
            <param name="type">The Type where the methods are coming from.</param>
            <returns>An ObservableCollection of ModuleMethod objects.</returns>
        </member>
        <member name="T:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever">
            <summary>
            XmlDescriptionRetriever is used to get text form an xml file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever"/> class.
            </summary>
            <param name="dllFilePath">The path to the dll file.</param>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.DllFilePath">
            <summary>
            Gets or sets the file path to the dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetModuleDescription(System.Type)">
            <summary>
            GetModuleDescription returns a clean string from the inner xml
            of the class description of the Type.
            </summary>
            <param name="type">Type to get the string from.</param>
            <returns>String representation of the class description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetMethodDescription(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            GetMethodDescription returns a string from the inner xml of the method
            description of the member.
            </summary>
            <param name="method">MethodInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetConstructorDescription(System.Reflection.ConstructorInfo,System.Int32)">
            <summary>
            GetConstructorDescription returns a string from the inner xml of the
            constructor description of the member.
            </summary>
            <param name="constructor">ConstructorInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            GetProperyDescription will return a string from the inner xml of
            the property desctiption.
            </summary>
            <param name="property">PropertyInfo to get the description from.</param>
            <returns>String representation of the property description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetMemberParameterDescription(System.Reflection.MethodBase,System.Int32,System.Int32)">
            <summary>
            GetMemberParameterDescription returns a string from the inner xml of the
            parameter description of the member.
            </summary>
            <param name="method">MemberInfo to get the string from.</param>
            <param name="parameterIndex">Integer index of parameter.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>String representation of the parameter description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetParametersFromList(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromList will return an ObservableCollection of MemberParameter
            type from a list of ParameterInfo type.
            </summary>
            <param name="method">The method to get the parameters from.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>An ObservableCollection of MemberParameter type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetMemberReturnDescription(System.Reflection.MethodBase)">
            <summary>
            GetMemberReturnDescription returns a string from the inner xml of the
            return description of the member.
            </summary>
            <param name="method">MethodBase to get the string from.</param>
            <returns>String representation of the return description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetParametersFromXml(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromXml will return an ObservableCollection of MemberParameters.
            </summary>
            <param name="method">The MethodBase to get parameters from.</param>
            <param name="memberIndex">Member index.</param>
            <returns>An ObservableCollection of MemberParameters.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetMemberXmlNode(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetMemberXmlNode returns an XmlNode of the specified MemberInfo.
            </summary>
            <param name="method">The MethodBase to get the XmlNode from.</param>
            <param name="nodeIndex">The specified node index to handle members with the same name.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetModuleXmlNode(System.Type)">
            <summary>
            GetModuleXmlNode returns an XmlNode of the specified Type.
            </summary>
            <param name="type">The Type to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetPropertyXmlNode(System.Reflection.PropertyInfo)">
            <summary>
            GetPropertyXmlNode returns an XmlNode of the specified property.
            </summary>
            <param name="property">The property to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetXmlNodeString(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            GetXmlNodeString will take an XmlNode, string xml tag, and an index and return the inner xml.
            </summary>
            <param name="xmlNode">The member XmlNode.</param>
            <param name="xmlTag">This is the string of the xml tag.</param>
            <param name="index">Index of the XmlNodeList, defaults to 0. (used for more than one parameter).</param>
            <returns>InnerXml of the XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.XmlDescriptionRetriever.GetXmlNodeText(System.Xml.XmlNode)">
            <summary>
            Returns the formatted text of the inner xml.
            </summary>
            <param name="xmlNode">XmlNode to get text from.</param>
            <returns>Formatted string of the XmlNode.InnerXml.</returns>
        </member>
        <member name="T:ModuleManager.ModuleRetriever.Classes.ModuleRetrieverModule">
            <summary>
            ModuleRetriever Module is used to get information from modules and store them.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleRetrieverModule.OnInitialized(Prism.Ioc.IContainerProvider)">
            <summary>
            Perform required initialization methods for this Module.
            </summary>
            <param name="containerProvider">A <see cref="T:Prism.Ioc.IContainerProvider"/> used for progam-wide type resolving.</param>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Classes.ModuleRetrieverModule.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Register types with the container that will be used by the application.
            </summary>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used for program-wide type registration.</param>
        </member>
        <member name="T:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever">
            <summary>
            Service designed to abstract calls to retrieve modules from dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the assembly being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleRetriever.Interfaces.IModuleInfoRetriever.GetModules(System.String[])">
            <summary>
            GetModules will create an ObservableCollection of type Module to organize
            the information from the dll file and its related .xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of Module objects.</returns>
        </member>
    </members>
</doc>
