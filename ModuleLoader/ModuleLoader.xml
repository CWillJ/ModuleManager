<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleLoader</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever">
            <summary>
            XmlDescriptionRetriever is used to get text form an xml file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever"/> class.
            </summary>
            <param name="dllFilePath">The path to the dll file.</param>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.DllFilePath">
            <summary>
            Gets or sets the file path to the dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetModuleDescription(System.Type)">
            <summary>
            GetModuleDescription returns a clean string from the inner xml
            of the class description of the Type.
            </summary>
            <param name="type">Type to get the string from.</param>
            <returns>String representation of the class description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetMethodDescription(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            GetMethodDescription returns a string from the inner xml of the method
            description of the member.
            </summary>
            <param name="method">MethodInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetConstructorDescription(System.Reflection.ConstructorInfo,System.Int32)">
            <summary>
            GetConstructorDescription returns a string from the inner xml of the
            constructor description of the member.
            </summary>
            <param name="constructor">ConstructorInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            GetProperyDescription will return a string from the inner xml of
            the property desctiption.
            </summary>
            <param name="property">PropertyInfo to get the description from.</param>
            <returns>String representation of the property description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetMemberParameterDescription(System.Reflection.MethodBase,System.Int32,System.Int32)">
            <summary>
            GetMemberParameterDescription returns a string from the inner xml of the
            parameter description of the member.
            </summary>
            <param name="method">MemberInfo to get the string from.</param>
            <param name="parameterIndex">Integer index of parameter.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>String representation of the parameter description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetParametersFromList(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromList will return an ObservableCollection of MemberParameter
            type from a list of ParameterInfo type.
            </summary>
            <param name="method">The method to get the parameters from.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>An ObservableCollection of MemberParameter type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetMemberReturnDescription(System.Reflection.MethodBase)">
            <summary>
            GetMemberReturnDescription returns a string from the inner xml of the
            return description of the member.
            </summary>
            <param name="method">MethodBase to get the string from.</param>
            <returns>String representation of the return description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetParametersFromXml(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromXml will return an ObservableCollection of MemberParameters.
            </summary>
            <param name="method">The MethodBase to get parameters from.</param>
            <param name="memberIndex">Member index.</param>
            <returns>An ObservableCollection of MemberParameters.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetMemberXmlNode(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetMemberXmlNode returns an XmlNode of the specified MemberInfo.
            </summary>
            <param name="method">The MethodBase to get the XmlNode from.</param>
            <param name="nodeIndex">The specified node index to handle members with the same name.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetModuleXmlNode(System.Type)">
            <summary>
            GetModuleXmlNode returns an XmlNode of the specified Type.
            </summary>
            <param name="type">The Type to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetPropertyXmlNode(System.Reflection.PropertyInfo)">
            <summary>
            GetPropertyXmlNode returns an XmlNode of the specified property.
            </summary>
            <param name="property">The property to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetXmlNodeString(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            GetXmlNodeString will take an XmlNode, string xml tag, and an index and return the inner xml.
            </summary>
            <param name="xmlNode">The member XmlNode.</param>
            <param name="xmlTag">This is the string of the xml tag.</param>
            <param name="index">Index of the XmlNodeList, defaults to 0. (used for more than one parameter).</param>
            <returns>InnerXml of the XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Classes.XmlDescriptionRetriever.GetXmlNodeText(System.Xml.XmlNode)">
            <summary>
            Returns the formatted text of the inner xml.
            </summary>
            <param name="xmlNode">XmlNode to get text from.</param>
            <returns>Formatted string of the XmlNode.InnerXml.</returns>
        </member>
        <member name="T:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService">
            <summary>
            Retrieves assemblies from dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the assembly being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.Initialize(System.String,System.String)">
            <summary>
            Initialized ModuleInfoRetriever's properties.
            </summary>
            <param name="moduleDirectory">Directory containing dll files.</param>
            <param name="moduleFilePath">Name of the specific dll file.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.GetAssemblies(System.String[])">
            <summary>
            Creates an ObservableCollection of AssemblyData to organize
            the information from the dll file and its related xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of AssemblyData objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.LoadUnload(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Loads all enabled assemblies and unloads the disabled ones.
            </summary>
            <param name="assembly">An <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> object passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.LoadUnload(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.AssemblyData}@)">
            <summary>
            Loads all enabled assemblies and unloads the disabled ones.
            </summary>
            <param name="assemblies">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.LoadAll(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.AssemblyData}@)">
            <summary>
            Loads all assemblies in a collection.
            </summary>
            <param name="assemblies">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> objects.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.Load(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Load an assembly.
            </summary>
            <param name="assembly">Assembly to load passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Interfaces.IAssemblyLoaderService.Unload(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Unload an assembly.
            </summary>
            <param name="assembly">Assembly to unload passed by reference.</param>
        </member>
        <member name="T:ModuleManager.ModuleLoader.Services.AssemblyLoaderService">
            <summary>
            Retrieves assemblies from dll files.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.#ctor(ModuleManager.ModuleObjects.Interfaces.IModuleCatalogService)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleLoader.Services.AssemblyLoaderService"/> class.
            </summary>
            <param name="moduleCatalogService">The module catalog service.</param>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.ModuleCatalogService">
            <summary>
            Gets the <see cref="T:ModuleManager.ModuleObjects.Interfaces.IModuleCatalogService"/> used here.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.DllFilePath">
            <summary>
            Gets or sets DllFilePath is the path of the .dll file.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.DescriptionRetriever">
            <summary>
            Gets or sets all xml descriptions.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.Initialize(System.String,System.String)">
            <summary>
            Initialized ModuleInfoRetriever's properties.
            </summary>
            <param name="moduleDirectory">Directory containing dll files.</param>
            <param name="moduleFilePath">Name of the specific dll file.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.GetAssemblies(System.String[])">
            <summary>
            Creates an ObservableCollection of AssemblyData to organize
            the information from the dll file and its related xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of AssemblyData objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.LoadUnload(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Loads all enabled assemblies and unloads the disabled ones.
            </summary>
            <param name="assembly">Assembly to load/unload passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.LoadUnload(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.AssemblyData}@)">
            <summary>
            Loads all enabled assemblies and unloads the disabled ones.
            </summary>
            <param name="assemblies">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> objects passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.LoadAll(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.AssemblyData}@)">
            <summary>
            Loads all assemblies in a collection.
            </summary>
            <param name="assemblies">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> objects.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.Load(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Loads an assembly.
            </summary>
            <param name="assembly">Assembly to load passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.Unload(ModuleManager.ModuleObjects.Classes.AssemblyData@)">
            <summary>
            Unloads an assembly.
            </summary>
            <param name="assembly">Assembly to unload passed by reference.</param>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.GetSingleModule(System.Type)">
            <summary>
            Builds a singls module from the given Type.
            </summary>
            <param name="type">Type from an assembly.</param>
            <returns>A Module type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.AddConstructorsToCollection(System.Type)">
            <summary>
            AddConstructorsToCollection get all constructors from a Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModuleConstructor objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.AddPropertiesToCollection(System.Type)">
            <summary>
            AddPropertiesToCollection gets all properties from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModulePropery objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleLoader.Services.AssemblyLoaderService.AddMethodsToCollection(System.Type)">
            <summary>
            AddMethodsToCollection gets all methods from the passed in Type.
            </summary>
            <param name="type">The Type where the methods are coming from.</param>
            <returns>An ObservableCollection of ModuleMethod objects.</returns>
        </member>
    </members>
</doc>
