<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleObjects</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.ModuleObjects.Classes.AssemblyData">
            <summary>
            AssemblyData holds the file path to the assembly so it can be loaded and
            the collection of modules in the assembly.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor(ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleData})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            Specify the path to the assembly and the collection of modules.
            </summary>
            <param name="moduleInfoRetriever">The IModuleInfoRetriever creating this AssemblyData.</param>
            <param name="name">Name of the assembly.</param>
            <param name="filePath">File path to the assembly.</param>
            <param name="modules">Collection of modules contained in the assembly.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the assembly is enabled or disabled.
            Nullable to handle three state checkbox.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.FilePath">
            <summary>
            Gets or sets the file path to assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Modules">
            <summary>
            Gets or sets a collection of modules contained in the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.InfoGetter">
            <summary>
            Gets the IModuleInfoRetriever.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Loader">
            <summary>
            Gets the AssemblyLoader to load/unload this assembly.
            Ignored by the XmlSerializer when saving the configuration.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Assembly">
            <summary>
            Gets or sets the actual Assembly of this AssemblyData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.LoadUnload(ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever)">
            <summary>
            Loads all assemblies with checked boxes and
            unloads the unchecked ones.
            </summary>
            <param name="moduleInfoRetriever">IModuleInfoRetriever.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.Load(ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever)">
            <summary>
            Load this assembly.
            </summary>
            <param name="moduleInfoRetriever">ModuleInfoRetriever.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.Unload">
            <summary>
            Unload this assembly.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.MemberParameter">
            <summary>
            An object designed to hold the type and name of a member's parameter.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            Used when the parameter Type is available.
            </summary>
            <param name="type">MemberParameter type.</param>
            <param name="name">MemberParameter name.</param>
            <param name="description">MemberParameter description.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            Used when the actual Type cannot be reached.
            </summary>
            <param name="typeName">MemberParameter type.</param>
            <param name="name">MemberParameter name.</param>
            <param name="description">MemberParameter description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.TypeName">
            <summary>
            Gets or sets the parameter type.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Description">
            <summary>
            Gets or sets the parameter description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Type">
            <summary>
            Gets or sets the actuall Type of the MemberParameter.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.IsEmpty">
            <summary>
            Check to see if the MemberParameter is empty.
            </summary>
            <returns>Returns true if the name is not an empty string or null.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.ToString">
            <summary>
            Overrides the ToString method and formats the string output of parameter type and name.
            </summary>
            <returns>A desired format for the parameter type and name.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor">
            <summary>
            ModuleConstructor object holds the class name, description and the parameters a constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.#ctor(System.Reflection.ConstructorInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleConstructor"/> class
            with specified name, description, and parameters.
            </summary>
            <param name="constructorInfo">ConstructorInfo for this ModuleConstructor.</param>
            <param name="className">Class name.</param>
            <param name="description">Constructor description.</param>
            <param name="parameters">Constructor parameters.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleConstructor.Parameters">
            <summary>
            Gets or sets the member parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleConstructor.ConstructorInfo">
            <summary>
            Gets or sets the actuall ConstructorInfo for this ModuleConstructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleConstructor.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the constructor name, description, and parameters.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleData">
            <summary>
            Module object holds the name and description of a module.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleData"/> class. Default constructor.
            initializes properties to empty strings/empty collections.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.#ctor(System.Type,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleConstructor},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleProperty},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.ModuleMethod})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleData"/> class specifying the name,
            description and methods.
            </summary>
            <param name="type">Module type.</param>
            <param name="name">Module name.</param>
            <param name="description">Module description.</param>
            <param name="constructors">Module constructors.</param>
            <param name="properties">Module properties.</param>
            <param name="methods">Module methods.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Name">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.FullName">
            <summary>
            Gets or sets this Module's Type's FullName.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the module is enabled or disabled.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Members">
            <summary>
            Gets or sets all of the module members.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Constructors">
            <summary>
            Gets or sets the constructors in the current module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Properties">
            <summary>
            Gets or sets the properties in the current module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Methods">
            <summary>
            Gets or sets the members in the current module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleData.Type">
            <summary>
            Gets or sets the actual Type of the ModuleData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.StoreModuleMembers">
            <summary>
            Store module constructors, properties and methods in the Members property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the module name, description and all members contained in module.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleMember">
            <summary>
            The base class for module members.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMember.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMember.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMember.TypeName">
            <summary>
            Gets or sets the Type of module.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleMethod">
            <summary>
            ModuleMethod object holds the description, the parameters and the return type of a member.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleMethod"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.#ctor(System.Reflection.MethodInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleMethod"/> class
            with specified name, description, parameters return type and return
            description through passed in parameters.
            </summary>
            <param name="methodInfo">MethodInfo for this ModuleMethod.</param>
            <param name="name">Member name.</param>
            <param name="description">Member description.</param>
            <param name="parameters">Member parameters.</param>
            <param name="returnType">Member return type.</param>
            <param name="returnDescription">Member return description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.Parameters">
            <summary>
            Gets or sets the member parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.ReturnType">
            <summary>
            Gets or sets the member return type.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.ReturnDescription">
            <summary>
            Gets or sets the member return description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleMethod.MethodInfo">
            <summary>
            Gets or sets the actual MethodInfo of the ModuleMethod.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.Invoke(System.Object[])">
            <summary>
            Invokes this method.
            </summary>
            <param name="args">The arguments needed to invoke this method.</param>
            <returns>An object that this method should return.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.ToString">
            <summary>
            Overrides the ToString method and formats the string output
            for the UI.
            </summary>
            <returns>A desired format for the member description, parameters
            and return type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleMethod.TestParameters(System.Object[])">
            <summary>
            Used to test if the passed in object array matches this method's parameter types.
            </summary>
            <param name="args">An array of objects that represent method parameters.</param>
            <returns>True if the object array matches the method's parameter types.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.ModuleProperty">
            <summary>
            ModuleProperty object holds the name, description, data type and accessor level of a property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleProperty"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.#ctor(System.Reflection.PropertyInfo,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.ModuleProperty"/> class
            with specified name, description, type and accessors.
            </summary>
            <param name="propertyInfo">PropertyInfo for this ModuleProperty.</param>
            <param name="name">Property name.</param>
            <param name="description">Property description.</param>
            <param name="dataType">Property data type.</param>
            <param name="canRead">Property has a 'get' accessor.</param>
            <param name="canWrite">Property has a 'set' accessor.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.DataType">
            <summary>
            Gets or sets the type of the property.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.CanRead">
            <summary>
            Gets or sets a value indicating whether this property has a get accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.CanWrite">
            <summary>
            Gets or sets a value indicating whether this property has a set accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.ModuleProperty.PropertyInfo">
            <summary>
            Gets or sets the actual PropertyInfo for this ModuleProperty.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.ModuleProperty.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the member description.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData">
            <summary>
            Module object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the assembly is enabled or disabled.
            Nullable to handle three state checkbox.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.FilePath">
            <summary>
            Gets or sets the file path to assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Modules">
            <summary>
            Gets or sets a collection of modules contained in the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Loader">
            <summary>
            Gets the AssemblyLoader to load/unload this assembly.
            Ignored by the XmlSerializer when saving the configuration.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Assembly">
            <summary>
            Gets or sets the actual Assembly of this AssemblyData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Load(ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever)">
            <summary>
            Load this assembly.
            </summary>
            <param name="moduleInfoRetriever">ModuleInfoRetriever.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Unload">
            <summary>
            Unload this assembly.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.LoadUnload(ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever)">
            <summary>
            Loads all assemblies that are enabled and
            unloads the ones that are not.
            </summary>
            <param name="moduleInfoRetriever">ModuleInfoRetriever.</param>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever">
            <summary>
            Service designed to abstract calls to retrieve modules from dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the assembly being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.GetModules(System.String[])">
            <summary>
            GetModules will create an ObservableCollection of type Module to organize
            the information from the dll file and its related .xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of Module objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.Initialize(System.String,System.String)">
            <summary>
            Initialized ModuleInfoRetriever's properties.
            </summary>
            <param name="moduleDirectory">Directory containing dll files.</param>
            <param name="moduleFilePath">Name of the specific dll file.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.AddConstructorsToCollection(System.Type)">
            <summary>
            AddConstructorsToCollection get all constructors from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModuleConstructor objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.AddPropertiesToCollection(System.Type)">
            <summary>
            AddPropertiesToCollection gets all properties from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModulePropery objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Interfaces.IModuleInfoRetriever.AddMethodsToCollection(System.Type)">
            <summary>
            AddMethodsToCollection gets all methods from the passed in Type.
            </summary>
            <param name="type">The Type where the methods are coming from.</param>
            <returns>An ObservableCollection of ModuleMethod objects.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Loaders.AssemblyLoader">
            <summary>
            The class that loads and unloads assemblies.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.AssemblyLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Loaders.AssemblyLoader"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.AssemblyLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Loaders.AssemblyLoader"/> class.
            </summary>
            <param name="mainAssemblyToLoadPath">The path to the assembly.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.AssemblyLoader.Load(System.Reflection.AssemblyName)">
            <summary>
            Overrides the Load method.
            </summary>
            <param name="name">The assembly name.</param>
            <returns>A loaded assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever">
            <summary>
            ModuleInfoRetriever is used to get information from a .dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever"/> class.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.DllFilePath">
            <summary>
            Gets or sets DllFilePath is the path of the .dll file.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.CurrentAssemblyName">
            <summary>
            Gets or sets CurrentAssemblyName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.CurrentTypeName">
            <summary>
            Gets or sets CurrentTypeName is the name of the type being loaded.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.PercentOfAssemblyLoaded">
            <summary>
            Gets or sets the current percentage of load compleation of the current assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.DescriptionRetriever">
            <summary>
            Gets or sets all xml descriptions.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.Initialize(System.String,System.String)">
            <summary>
            Initialized ModuleInfoRetriever's properties.
            </summary>
            <param name="moduleDirectory">Directory containing dll files.</param>
            <param name="moduleFilePath">Name of the specific dll file.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.ModuleManager#ModuleObjects#Interfaces#IModuleInfoRetriever#GetModules(System.String[])">
            <summary>
            GetModules will create an ObservableCollection of type Module to organize
            the information from the dll file and its related .xml file.
            </summary>
            <param name="dllFiles">A string array containing the names of all dll files in the DllDirectory.</param>
            <returns>Returns an collection of Module objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.GetSingleModule(System.Type)">
            <summary>
            Builds a singls module from the given Type.
            </summary>
            <param name="type">Type from an assembly.</param>
            <returns>A Module type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.AddConstructorsToCollection(System.Type)">
            <summary>
            AddConstructorsToCollection get all constructors from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModuleConstructor objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.AddPropertiesToCollection(System.Type)">
            <summary>
            AddPropertiesToCollection gets all properties from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModulePropery objects.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.ModuleInfoRetriever.AddMethodsToCollection(System.Type)">
            <summary>
            AddMethodsToCollection gets all methods from the passed in Type.
            </summary>
            <param name="type">The Type where the methods are coming from.</param>
            <returns>An ObservableCollection of ModuleMethod objects.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever">
            <summary>
            XmlDescriptionRetriever is used to get text form an xml file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever"/> class.
            </summary>
            <param name="dllFilePath">The path to the dll file.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.DllFilePath">
            <summary>
            Gets or sets the file path to the dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetModuleDescription(System.Type)">
            <summary>
            GetModuleDescription returns a clean string from the inner xml
            of the class description of the Type.
            </summary>
            <param name="type">Type to get the string from.</param>
            <returns>String representation of the class description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetMethodDescription(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            GetMethodDescription returns a string from the inner xml of the method
            description of the member.
            </summary>
            <param name="method">MethodInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetConstructorDescription(System.Reflection.ConstructorInfo,System.Int32)">
            <summary>
            GetConstructorDescription returns a string from the inner xml of the
            constructor description of the member.
            </summary>
            <param name="constructor">ConstructorInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            GetProperyDescription will return a string from the inner xml of
            the property desctiption.
            </summary>
            <param name="property">PropertyInfo to get the description from.</param>
            <returns>String representation of the property description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetMemberParameterDescription(System.Reflection.MethodBase,System.Int32,System.Int32)">
            <summary>
            GetMemberParameterDescription returns a string from the inner xml of the
            parameter description of the member.
            </summary>
            <param name="method">MemberInfo to get the string from.</param>
            <param name="parameterIndex">Integer index of parameter.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>String representation of the parameter description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetParametersFromList(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromList will return an ObservableCollection of MemberParameter
            type from a list of ParameterInfo type.
            </summary>
            <param name="method">The method to get the parameters from.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>An ObservableCollection of MemberParameter type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetMemberReturnDescription(System.Reflection.MethodBase)">
            <summary>
            GetMemberReturnDescription returns a string from the inner xml of the
            return description of the member.
            </summary>
            <param name="method">MethodBase to get the string from.</param>
            <returns>String representation of the return description.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetParametersFromXml(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetParametersFromXml will return an ObservableCollection of MemberParameters.
            </summary>
            <param name="method">The MethodBase to get parameters from.</param>
            <param name="memberIndex">Member index.</param>
            <returns>An ObservableCollection of MemberParameters.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetMemberXmlNode(System.Reflection.MethodBase,System.Int32)">
            <summary>
            GetMemberXmlNode returns an XmlNode of the specified MemberInfo.
            </summary>
            <param name="method">The MethodBase to get the XmlNode from.</param>
            <param name="nodeIndex">The specified node index to handle members with the same name.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetModuleXmlNode(System.Type)">
            <summary>
            GetModuleXmlNode returns an XmlNode of the specified Type.
            </summary>
            <param name="type">The Type to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetPropertyXmlNode(System.Reflection.PropertyInfo)">
            <summary>
            GetPropertyXmlNode returns an XmlNode of the specified property.
            </summary>
            <param name="property">The property to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetXmlNodeString(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            GetXmlNodeString will take an XmlNode, string xml tag, and an index and return the inner xml.
            </summary>
            <param name="xmlNode">The member XmlNode.</param>
            <param name="xmlTag">This is the string of the xml tag.</param>
            <param name="index">Index of the XmlNodeList, defaults to 0. (used for more than one parameter).</param>
            <returns>InnerXml of the XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Loaders.XmlDescriptionRetriever.GetXmlNodeText(System.Xml.XmlNode)">
            <summary>
            Returns the formatted text of the inner xml.
            </summary>
            <param name="xmlNode">XmlNode to get text from.</param>
            <returns>Formatted string of the XmlNode.InnerXml.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.ModuleObjectsModule">
            <summary>
            ModuleObjects module holds the objects the modules are stored in.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.ModuleObjectsModule.OnInitialized(Prism.Ioc.IContainerProvider)">
            <summary>
            Perform required initialization methods for this Module.
            </summary>
            <param name="containerProvider">A <see cref="T:Prism.Ioc.IContainerProvider"/> used for progam-wide type resolving.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.ModuleObjectsModule.RegisterTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Register types with the container that will be used by the application.
            </summary>
            <param name="containerRegistry"><see cref="T:Prism.Ioc.IContainerRegistry"/> used for program-wide type registration.</param>
        </member>
    </members>
</doc>
