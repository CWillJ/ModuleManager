<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleObjects</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.ModuleObjects.Classes.AssemblyData">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.#ctor(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeData})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyData"/> class.
            </summary>
            <param name="name">Name of the assembly.</param>
            <param name="filePath">File path to the assembly.</param>
            <param name="modules">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of modules.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Name">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.IsEnabled">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.FilePath">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Types">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.ModuleType">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Loader">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.AssemblyData.Assembly">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData"/>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the assembly.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader">
            <summary>
            The class that loads and unloads assemblies.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader"/> class.
            </summary>
            <param name="mainAssemblyToLoadPath">The path to the assembly.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.LoadAllReferencedAssemblies(System.Reflection.Assembly)">
            <summary>
            Loads all referenced assemblies from the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load all referenced assemblies from.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.AssemblyLoader.Load(System.Reflection.AssemblyName)">
            <summary>
            Overrides the Load method.
            </summary>
            <param name="name">The <see cref="T:System.Reflection.AssemblyName"/> of the <see cref="T:System.Reflection.Assembly"/> to be loaded.</param>
            <returns>A loaded <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.MemberParameter">
            <summary>
            An object designed to hold the type, name and string description of a member's parameter.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that holds this.</param>
            <param name="name"><see cref="T:System.String"/> parameter name.</param>
            <param name="description"><see cref="T:System.String"/> parameter description.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> class.
            Used when the actual Type cannot be reached.
            </summary>
            <param name="typeName">The <see cref="T:System.String"/> that holds this.</param>
            <param name="name"><see cref="T:System.String"/> parameter name.</param>
            <param name="description"><see cref="T:System.String"/> parameter description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.TypeName">
            <summary>
            Gets or sets the <see cref="T:System.String"/> parameter type name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Name">
            <summary>
            Gets or sets the <see cref="T:System.String"/> parameter name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Description">
            <summary>
            Gets or sets the <see cref="T:System.String"/> parameter description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.MemberParameter.Type">
            <summary>
            Gets or sets the actuall <see cref="T:System.Type"/> of the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/>.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.IsEmpty">
            <summary>
            Check to see if the <see cref="T:ModuleManager.ModuleObjects.Classes.MemberParameter"/> is empty.
            </summary>
            <returns>Returns true if the name is not an empty string or null.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.MemberParameter.ToString">
            <summary>
            Overrides the ToString method and formats the string output of parameter type and name.
            </summary>
            <returns>A desired format for the parameter type and name.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.TypeConstructor">
            <summary>
            Holds the <see cref="P:ModuleManager.ModuleObjects.Classes.TypeConstructor.ConstructorInfo"/>, class name, description and the parameters of a type's constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeConstructor"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeConstructor.#ctor(System.Reflection.ConstructorInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeConstructor"/> class.
            </summary>
            <param name="constructorInfo"><see cref="T:System.Reflection.ConstructorInfo"/> for this <see cref="T:ModuleManager.ModuleObjects.Classes.TypeConstructor"/>.</param>
            <param name="className"><see cref="T:System.String"/> class name.</param>
            <param name="description"><see cref="T:System.String"/> constructor description.</param>
            <param name="parameters">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, constructor parameters.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeConstructor.Parameters">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, the constructor parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeConstructor.ConstructorInfo">
            <summary>
            Gets or sets the actuall <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeConstructor.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the constructor name, description, and parameters.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.TypeData">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeData"/>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeData"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.#ctor(System.Type,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeConstructor},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeProperty},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeMethod})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeData"/> class.
            </summary>
            <param name="type">Module <see cref="T:System.Type"/>.</param>
            <param name="name"><see cref="T:System.String"/> Module name.</param>
            <param name="description"><see cref="T:System.String"/> Module description.</param>
            <param name="constructors">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of type constructors.</param>
            <param name="properties">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of type properties.</param>
            <param name="methods">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of type methods.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Name">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.FullName">
            <summary>
            Gets or sets this Module's Type's FullName <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Description">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Members">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Constructors">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing the type constructors.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Properties">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing the type properties.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Methods">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing the type methods.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.IsView">
            <summary>
            Gets or sets a value indicating whether or not this module's type is a view.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeData.Type">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the TypeData.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.StoreModuleMembers">
            <summary>
            Stores all <see cref="T:ModuleManager.ModuleObjects.Classes.TypeConstructor"/>, <see cref="T:ModuleManager.ModuleObjects.Classes.TypeProperty"/> and <see cref="T:ModuleManager.ModuleObjects.Classes.TypeMethod"/> in the Members property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the module name, description and all members contained in module.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.SetIsView">
            <summary>
            Sets the IsView property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.InitializeMembers(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeConstructor},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeProperty},System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeMethod})">
            <summary>
            This will add <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Constructors and Members properties,
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Properties and Members properties, and
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Methods and Members properties.
            </summary>
            <param name="constructors">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
            <param name="properties">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
            <param name="methods">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.InitializeConstructors(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeConstructor})">
            <summary>
            Adds a <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Constructors and Members properties.
            </summary>
            <param name="constructors">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.InitializeProperties(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeProperty})">
            <summary>
            Adds a <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Properties and Members properties.
            </summary>
            <param name="properties">A <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeData.InitializeMethods(System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.TypeMethod})">
            <summary>
            Adds a <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to the Methods and Members properties.
            </summary>
            <param name="methods">An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.TypeMemberData">
            <summary>
            The base class for module members.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMemberData.Name">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMemberData.Description">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData"/>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMemberData.TypeName">
            <inheritdoc cref="T:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData"/>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.TypeMethod">
            <summary>
            TypeMethod object holds the MethodInfo, name, description, the parameters and the return type of a member.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeMethod"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeMethod.#ctor(System.Reflection.MethodInfo,System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.ModuleObjects.Classes.MemberParameter},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeMethod"/> class.
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/>.</param>
            <param name="name"><see cref="T:System.String"/> method name.</param>
            <param name="description"><see cref="T:System.String"/> method description.</param>
            <param name="parameters"><see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> method parameters.</param>
            <param name="returnType"><see cref="T:System.String"/> method return type.</param>
            <param name="returnDescription"><see cref="T:System.String"/> method return description.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMethod.Parameters">
            <summary>
            Gets or sets the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>s.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMethod.ReturnType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> method return type.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMethod.ReturnDescription">
            <summary>
            Gets or sets the <see cref="T:System.String"/> method return description.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeMethod.MethodInfo">
            <summary>
            Gets or sets the actual <see cref="T:System.Reflection.MethodInfo"/> of the TypeMethod.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeMethod.Invoke(System.Object[])">
            <summary>
            Invokes this method.
            </summary>
            <param name="args">The <see cref="T:System.Object"/> array arguments needed to invoke this method.</param>
            <returns>An object that this method should return.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeMethod.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the member description, parameters
            and return type.</returns>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeMethod.TestParameters(System.Object[])">
            <summary>
            Used to test if the passed in <see cref="T:System.Object"/> array matches this method's parameter types.
            </summary>
            <param name="args">An array of <see cref="T:System.Object"/>s that represent method parameters.</param>
            <returns>True if the object array matches the method's parameter types.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Classes.TypeProperty">
            <summary>
            TypeProperty object holds the PropertyInfo, name, description, data type and accessor level of a property.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeProperty"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeProperty.#ctor(System.Reflection.PropertyInfo,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleObjects.Classes.TypeProperty"/> class.
            </summary>
            <param name="propertyInfo"><see cref="T:System.Reflection.PropertyInfo"/> for this.</param>
            <param name="name"><see cref="T:System.String"/> property name.</param>
            <param name="description"><see cref="T:System.String"/> property description.</param>
            <param name="dataType"><see cref="T:System.String"/> property data type.</param>
            <param name="canRead"><see cref="T:System.String"/> property has a 'get' accessor.</param>
            <param name="canWrite"><see cref="T:System.String"/> property has a 'set' accessor.</param>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeProperty.DataType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> type of the property.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeProperty.CanRead">
            <summary>
            Gets or sets a value indicating whether this property has a get accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeProperty.CanWrite">
            <summary>
            Gets or sets a value indicating whether this property has a set accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Classes.TypeProperty.PropertyInfo">
            <summary>
            Gets or sets the actual <see cref="T:System.Reflection.PropertyInfo"/> for this.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleObjects.Classes.TypeProperty.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the member description.</returns>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.IAssemblyData">
            <summary>
            Assembly object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the assembly is enabled or disabled.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.FilePath">
            <summary>
            Gets or sets the file path to assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Types">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of modules contained in the assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.ModuleType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the module in this assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Loader">
            <summary>
            Gets or sets the <see cref="T:ModuleManager.ModuleObjects.Classes.AssemblyLoader"/> to load/unload this assembly.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.IAssemblyData.Assembly">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.Assembly"/> of this AssemblyData.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.ITypeData">
            <summary>
            Module member object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeData.Name">
            <summary>
            Gets or sets the <see cref="T:System.String"/> name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeData.Description">
            <summary>
            Gets or sets the <see cref="T:System.String"/> description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeData.Members">
            <summary>
            Gets or sets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of the module members.
            </summary>
        </member>
        <member name="T:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData">
            <summary>
            Module member object interface.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData.Name">
            <summary>
            Gets or sets the <see cref="T:System.String"/> name.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData.Description">
            <summary>
            Gets or sets the <see cref="T:System.String"/> description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleObjects.Interfaces.ITypeMemberData.TypeName">
            <summary>
            Gets or sets the <see cref="T:System.String"/> name of the Type.
            </summary>
        </member>
    </members>
</doc>
