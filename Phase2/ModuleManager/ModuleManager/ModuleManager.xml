<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModuleManager</name>
    </assembly>
    <members>
        <member name="T:ModuleManager.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:ModuleManager.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ModuleManager.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:ModuleManager.Behavoirs.BoolToVisibilityConverter">
            <summary>
            BoolToVisibilityConverter converts a Visibility object to a bool value.
            </summary>
        </member>
        <member name="M:ModuleManager.Behavoirs.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts Visibility to bool.
            </summary>
            <param name="value">Object.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Object parameter.</param>
            <param name="culture">Culture Info.</param>
            <returns>True if visibility is visible, false if collapsed.</returns>
        </member>
        <member name="M:ModuleManager.Behavoirs.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts bool to Visibility object
            </summary>
            <param name="value">Object to convert.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Object parameter.</param>
            <param name="culture">Culture Info.</param>
            <returns>Visibility.Visible if true and Visibility.Collapsed if false.</returns>
        </member>
        <member name="T:ModuleManager.Behavoirs.TemplateSelector">
            <summary>
            Used to selected a DataTemplate in the view.
            </summary>
        </member>
        <member name="M:ModuleManager.Behavoirs.TemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Used to select the DataTemplate used in the view.
            </summary>
            <param name="item">Object.</param>
            <param name="container">Container.</param>
            <returns>A DataTemplate depending on the object passed in.</returns>
        </member>
        <member name="T:ModuleManager.Behavoirs.TreeViewItemSelector">
            <summary>
            Used to selected a DataTemplate in the view.
            </summary>
        </member>
        <member name="M:ModuleManager.Behavoirs.TreeViewItemSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Used to select the DataTemplate used in the view.
            </summary>
            <param name="item">Object.</param>
            <param name="container">Container.</param>
            <returns>A DataTemplate depending on the object passed in.</returns>
        </member>
        <member name="T:ModuleManager.Classes.MemberParameter">
            <summary>
            An object designed to hold the type and name of a member's parameter.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MemberParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.MemberParameter"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MemberParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.MemberParameter"/> class
            that defines the parameter type and name through parameters.
            </summary>
            <param name="type">MemberParameter type.</param>
            <param name="name">MemberParameter name.</param>
            <param name="description">MemberParameter description.</param>
        </member>
        <member name="P:ModuleManager.Classes.MemberParameter.Type">
            <summary>
            Gets or sets the parameter type.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.MemberParameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.MemberParameter.Description">
            <summary>
            Gets or sets the parameter description.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MemberParameter.ToString">
            <summary>
            Overrides the ToString method and formats the string output of parameter type and name.
            </summary>
            <returns>A desired format for the parameter type and name.</returns>
        </member>
        <member name="T:ModuleManager.Classes.Module">
            <summary>
            Module object holds the name and description of a module.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.Module.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.Module"/> class. Default constructor.
            initializes properties to empty strings/empty collections.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.Module.#ctor(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.Classes.ModuleConstructor},System.Collections.ObjectModel.ObservableCollection{ModuleManager.Classes.ModuleProperty},System.Collections.ObjectModel.ObservableCollection{ModuleManager.Classes.ModuleMethod})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.Module"/> class specifying the name, description and methods.
            </summary>
            <param name="name">Module name.</param>
            <param name="description">Module description.</param>
            <param name="constructors">Module constructors.</param>
            <param name="properties">Module properties.</param>
            <param name="methods">Module methods.</param>
        </member>
        <member name="M:ModuleManager.Classes.Module.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.Module"/> class specifing a Type.
            </summary>
            <param name="type">Type object found in an Assembly.</param>
            <param name="dllFileName">File name of the dll file.</param>
        </member>
        <member name="E:ModuleManager.Classes.Module.PropertyChanged">
            <summary>
            The event handler that handles a property change.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.IsSelected">
            <summary>
            Gets or sets a value indicating whether the member is selected.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the module is enabled or disabled.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Name">
            <summary>
            Gets or sets the module name.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Description">
            <summary>
            Gets or sets the description of the module.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Members">
            <summary>
            Gets or sets all of the module members.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Constructors">
            <summary>
            Gets or sets the constructors in the current module.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Properties">
            <summary>
            Gets or sets the properties in the current module.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.Module.Methods">
            <summary>
            Gets or sets the members in the current module.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.Module.RaisePropertyChanged(System.String)">
            <summary>
            Raise a property changed event.
            </summary>
            <param name="property">Property passed in as a string.</param>
        </member>
        <member name="M:ModuleManager.Classes.Module.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the module name, description and all members contained in module.</returns>
        </member>
        <member name="T:ModuleManager.Classes.ModuleConstructor">
            <summary>
            ModuleConstructor object holds the class name, description and the parameters a constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleConstructor"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleConstructor.#ctor(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.Classes.MemberParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleConstructor"/> class
            with specified name, description, and parameters.
            </summary>
            <param name="className">Class name.</param>
            <param name="description">Constructor description.</param>
            <param name="parameters">Constructor parameters.</param>
        </member>
        <member name="P:ModuleManager.Classes.ModuleConstructor.Parameters">
            <summary>
            Gets or sets the member parameters.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleConstructor.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the constructor name, description, and parameters.</returns>
        </member>
        <member name="T:ModuleManager.Classes.ModuleInfoRetriever">
            <summary>
            ModuleInfoRetriever is used to get information from a .dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleInfoRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleInfoRetriever"/> class.
            </summary>
            <param name="moduleDirectory">File name of the .dll file.</param>
        </member>
        <member name="P:ModuleManager.Classes.ModuleInfoRetriever.DllDirectory">
            <summary>
            Gets or sets DllDirectory is the directory path of the .dll files.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleInfoRetriever.DescriptionRetriever">
            <summary>
            Gets or sets all xml descriptions.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleInfoRetriever.LoadedAssemblies">
            <summary>
            Gets or sets LoadedAssemblies which stores all assemblies that have already been loaded.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleInfoRetriever.GetModules">
            <summary>
            GetModules will create an ObservableCollection of type Module to organize
            the information from the dll file and its related .xml file.
            From .dll.
            </summary>
            <returns>Returns an collection of Module objects.</returns>
        </member>
        <member name="M:ModuleManager.Classes.ModuleInfoRetriever.AddConstructorsToCollection(System.Type)">
            <summary>
            AddConstructorsToCollection get all constructors from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModuleConstructor objects.</returns>
        </member>
        <member name="M:ModuleManager.Classes.ModuleInfoRetriever.AddPropertiesToCollection(System.Type)">
            <summary>
            AddPropertiesToCollection gets all properties from the passed in Type.
            </summary>
            <param name="type">The Type where the members are coming from.</param>
            <returns>An ObservableCollection of ModulePropery objects.</returns>
        </member>
        <member name="M:ModuleManager.Classes.ModuleInfoRetriever.AddMethodsToCollection(System.Type)">
            <summary>
            AddMethodsToCollection gets all methods from the passed in Type.
            </summary>
            <param name="type">The Type where the methods are coming from.</param>
            <returns>An ObservableCollection of ModuleMethod objects.</returns>
        </member>
        <member name="T:ModuleManager.Classes.ModuleMethod">
            <summary>
            ModuleMethod object holds the description, the parameters and the return type of a member.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleMethod.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleMethod"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleMethod.#ctor(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{ModuleManager.Classes.MemberParameter},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleMethod"/> class
            with specified name, description, parameters return type and return
            description through passed in parameters.
            </summary>
            <param name="name">Member name.</param>
            <param name="description">Member description.</param>
            <param name="parameters">Member parameters.</param>
            <param name="returnType">Member return type.</param>
            <param name="returnDescription">Member return description.</param>
        </member>
        <member name="P:ModuleManager.Classes.ModuleMethod.Parameters">
            <summary>
            Gets or sets the member parameters.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleMethod.ReturnType">
            <summary>
            Gets or sets the member return type.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleMethod.ReturnDescription">
            <summary>
            Gets or sets the member return description.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleMethod.ToString">
            <summary>
            Overrides the ToString method and formats the string output
            for the UI.
            </summary>
            <returns>A desired format for the member description, parameters
            and return type.</returns>
        </member>
        <member name="T:ModuleManager.Classes.ModuleProperty">
            <summary>
            ModuleProperty object holds the name, description, data type and accessor level of a property.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleProperty"/> class. Default constructor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleProperty.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.ModuleProperty"/> class
            with specified name, description, type and accessors
            </summary>
            <param name="name">Property name.</param>
            <param name="description">Property description.</param>
            <param name="dataType">Property data type.</param>
            <param name="canRead">Property has a 'get' accessor.</param>
            <param name="canWrite">Property has a 'set' accessor.</param>
        </member>
        <member name="P:ModuleManager.Classes.ModuleProperty.DataType">
            <summary>
            Gets or sets the type of the property.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleProperty.CanRead">
            <summary>
            Gets or sets a value indicating whether this property has a get accessor.
            </summary>
        </member>
        <member name="P:ModuleManager.Classes.ModuleProperty.CanWrite">
            <summary>
            Gets or sets a value indicating whether this property has a set accessor.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.ModuleProperty.ToString">
            <summary>
            Overrides the ToString method and formats the string output.
            </summary>
            <returns>A desired format for the member description.</returns>
        </member>
        <member name="T:ModuleManager.Classes.MyICommand">
            <summary>
            MyICommand implements the ICommand.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MyICommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.MyICommand"/> class.
            </summary>
            <param name="executeMethod">Method to execute.</param>
        </member>
        <member name="M:ModuleManager.Classes.MyICommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.MyICommand"/> class.
            </summary>
            <param name="executeMethod">Method to execute.</param>
            <param name="canExecuteMethod">Returns boolean value on if a method can be executed.</param>
        </member>
        <member name="E:ModuleManager.Classes.MyICommand.CanExecuteChanged">
            <summary>
            Delegate event handler.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MyICommand.RaiseCanExecuteChanged">
            <summary>
            Raise an event where the can execute a method has changed.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.MyICommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Returns boolean value stating whether the object can be executed on.
            </summary>
            <param name="parameter">Object.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:ModuleManager.Classes.MyICommand.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Executes on the passed in object.
            </summary>
            <param name="parameter">Object.</param>
        </member>
        <member name="T:ModuleManager.Classes.XmlDescriptionRetriever">
            <summary>
            XmlDescriptionRetriever is used to get text form an xml file.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.XmlDescriptionRetriever"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.Classes.XmlDescriptionRetriever"/> class.
            </summary>
            <param name="dllFilePath">The path to the dll file.</param>
        </member>
        <member name="P:ModuleManager.Classes.XmlDescriptionRetriever.DllFilePath">
            <summary>
            Gets or sets the file path to the dll file.
            </summary>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetModuleDescription(System.Type)">
            <summary>
            GetModuleDescription returns a clean string from the inner xml
            of the class description of the Type.
            </summary>
            <param name="type">Type to get the string from.</param>
            <returns>String representation of the class description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetMethodDescription(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            GetMethodDescription returns a clean string from the inner xml
            of the method description of the member.
            </summary>
            <param name="method">MethodInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetConstructorDescription(System.Reflection.ConstructorInfo,System.Int32)">
            <summary>
            GetConstructorDescription returns a clean string from the inner xml
            of the constructor description of the member.
            </summary>
            <param name="constructor">ConstructorInfo to get the string from.</param>
            <param name="index">Index used for methods/constructors with same name.</param>
            <returns>String representation of the method description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetPropertyDescription(System.Reflection.PropertyInfo)">
            <summary>
            GetProperyDescription will return a string from the inner xml of
            the property desctiption.
            </summary>
            <param name="property">PropertyInfo to get the description from.</param>
            <returns>String representation of the property description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetMemberParameterDescription(System.Reflection.MemberInfo,System.Int32,System.Int32)">
            <summary>
            GetMemberParameterDescription returns a clean string from the inner xml
            of the parameter description of the member.
            </summary>
            <param name="member">MemberInfo to get the string from.</param>
            <param name="parameterIndex">Integer index of parameter.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>String representation of the parameter description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetParametersFromList(System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            GetParametersFromList will return an ObservableCollection of MemberParameter
            type from a list of ParameterInfo type.
            </summary>
            <param name="paramList">A list of ParameterInfo type.</param>
            <param name="memberIndex">Integer index of member.</param>
            <returns>An ObservableCollection of MemberParameter type.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetMemberReturnDescription(System.Reflection.MemberInfo)">
            <summary>
            GetMemberReturnDescription returns a clean string from the inner xml
            of the return description of the member.
            </summary>
            <param name="member">MemberInfo to get the string from.</param>
            <returns>String representation of the return description.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetMemberXmlNode(System.Reflection.MemberInfo,System.Int32)">
            <summary>
            GetMemberXmlNode returns an XmlNode of the specified MemberInfo.
            </summary>
            <param name="member">The MemberInfo to get the XmlNode from.</param>
            <param name="nodeIndex">The specified node index to handle members with the same name.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetModuleXmlNode(System.Type)">
            <summary>
            GetModuleXmlNode returns an XmlNode of the specified Type.
            </summary>
            <param name="type">The Type to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetPropertyXmlNode(System.Reflection.PropertyInfo)">
            <summary>
            GetPropertyXmlNode returns an XmlNode of the specified property.
            </summary>
            <param name="property">The property to get the XmlNode from.</param>
            <returns>XmlNode.</returns>
        </member>
        <member name="M:ModuleManager.Classes.XmlDescriptionRetriever.GetXmlNodeString(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            GetXmlNodeString will take an XmlNode, string xml tag, and an index and return the inner xml.
            </summary>
            <param name="xmlNode">The member XmlNode.</param>
            <param name="xmlTag">This is the string of the xml tag.</param>
            <param name="index">Index of the XmlNodeList, defaults to 0. (used for more than one parameter).</param>
            <returns>InnerXml of the XmlNode.</returns>
        </member>
        <member name="T:ModuleManager.ModuleMember">
            <summary>
            The base class for ModuleConstructor, ModuleProperty, and ModuleMethod.
            </summary>
        </member>
        <member name="M:ModuleManager.ModuleMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ModuleMember"/> class.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleMember.Name">
            <summary>
            Gets or sets the name of the member.
            </summary>
        </member>
        <member name="P:ModuleManager.ModuleMember.Description">
            <summary>
            Gets or sets the description of the member.
            </summary>
        </member>
        <member name="T:ModuleManager.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml.
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:ModuleManager.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.MainWindow"/> class.
            </summary>
        </member>
        <member name="M:ModuleManager.MainWindow.TreeView_SelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Bad bad bad.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">e.</param>
        </member>
        <member name="M:ModuleManager.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ModuleManager.ViewModels.ModuleManagerViewModel">
            <summary>
            ModuleManagerViewModel will handle commands from the main view.
            </summary>
        </member>
        <member name="M:ModuleManager.ViewModels.ModuleManagerViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModuleManager.ViewModels.ModuleManagerViewModel"/> class.
            </summary>
        </member>
        <member name="E:ModuleManager.ViewModels.ModuleManagerViewModel.PropertyChanged">
            <summary>
            PropertyChanged event handler.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.UseSaveFileDialog">
            <summary>
            Gets or sets a value indicating whether SaveFileDialog is used on save settings
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.LoadModulesCommand">
            <summary>
            Gets or sets the LoadModulesCommand as a MyICommand.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.SaveConfigCommand">
            <summary>
            Gets or sets the SaveConfigCommand as a MyICommand.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.ModuleDirectory">
            <summary>
            Gets or sets the file location as a string.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.ProgressBarText">
            <summary>
            Gets or sets the progress bar text.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.CurrentProgress">
            <summary>
            Gets the current progress of the status bar.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.ProgressBarIsVisible">
            <summary>
            Gets or sets a value indicating whether a progress bar is visible.
            </summary>
        </member>
        <member name="P:ModuleManager.ViewModels.ModuleManagerViewModel.Modules">
            <summary>
            Gets or sets the collection of Modules.
            </summary>
        </member>
        <member name="M:ModuleManager.ViewModels.ModuleManagerViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Raise a property changed event.
            </summary>
            <param name="property">Property passed in as a string.</param>
        </member>
        <member name="M:ModuleManager.ViewModels.ModuleManagerViewModel.StoreModules">
            <summary>
            StoreModules will attempt to get all assemblies from a dll and store it
            as a Module in the Modules collection.
            </summary>
        </member>
        <member name="M:ModuleManager.ViewModels.ModuleManagerViewModel.SaveConfig">
            <summary>
            SaveConfig will save an ObservableCollection to an xml file.
            The boolean, UseSaveFileDialog will be tested to see if the
            SaveFileDialog will be used or if the hardcoded file location
            will be used.
            </summary>
        </member>
        <member name="M:ModuleManager.ViewModels.ModuleManagerViewModel.LoadConfig">
            <summary>
            LoadConfig will load an ObservableCollection of type Module from an xml file
            </summary>
            <returns>ObservableCollection of type Module.</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
